diff --git a/debug.log b/debug.log
index f41ac02..f3d7a31 100644
--- a/debug.log
+++ b/debug.log
@@ -4,3 +4,12 @@
 [0921/133838.415:ERROR:process_reader_win.cc(123)] NtOpenThread: {Käyttö estetty} Prosessi pyysi objektin käyttöä, mutta käyttöoikeuksia ei ole myönnetty.  (0xc0000022)
 [0921/133838.416:ERROR:exception_snapshot_win.cc(87)] thread ID 8036 not found in process
 [0921/133838.416:WARNING:crash_report_exception_handler.cc(62)] ProcessSnapshotWin::Initialize failed
+[0925/121450.431:ERROR:process_reader_win.cc(123)] NtOpenThread: {Käyttö estetty} Prosessi pyysi objektin käyttöä, mutta käyttöoikeuksia ei ole myönnetty.  (0xc0000022)
+[0925/121450.462:ERROR:exception_snapshot_win.cc(87)] thread ID 11776 not found in process
+[0925/121450.462:WARNING:crash_report_exception_handler.cc(62)] ProcessSnapshotWin::Initialize failed
+[0925/135939.734:ERROR:process_reader_win.cc(123)] NtOpenThread: {Käyttö estetty} Prosessi pyysi objektin käyttöä, mutta käyttöoikeuksia ei ole myönnetty.  (0xc0000022)
+[0925/135939.746:ERROR:exception_snapshot_win.cc(87)] thread ID 7308 not found in process
+[0925/135939.746:WARNING:crash_report_exception_handler.cc(62)] ProcessSnapshotWin::Initialize failed
+[0925/153214.300:ERROR:process_reader_win.cc(123)] NtOpenThread: {Käyttö estetty} Prosessi pyysi objektin käyttöä, mutta käyttöoikeuksia ei ole myönnetty.  (0xc0000022)
+[0925/153214.326:ERROR:exception_snapshot_win.cc(87)] thread ID 5960 not found in process
+[0925/153214.326:WARNING:crash_report_exception_handler.cc(62)] ProcessSnapshotWin::Initialize failed
diff --git a/e2e/app.e2e-spec.ts b/e2e/app.e2e-spec.ts
index 7534ae8..ac332f6 100644
--- a/e2e/app.e2e-spec.ts
+++ b/e2e/app.e2e-spec.ts
@@ -24,7 +24,7 @@ describe('translate-it2 App', () => {
     expect(await page.getLastParagraphText('app-root li a')).toEqual('Angular blog');
   });
 
-  fit('should navigate to project list when Container link clicked', async () => {
+  it('should navigate to project list when Container link clicked', async () => {
     page.navigateTo('/');
     await element(by.id('projects')).click();
 
@@ -35,7 +35,7 @@ describe('translate-it2 App', () => {
     expect(elementText).toEqual('NAME');
   });
 
-  fit('should navigate to work list when Next clicked', async () => {
+  it('should navigate to work list when Next clicked', async () => {
     page.navigateTo('/projects;state=edit;id=1');
     expect(await browser.getCurrentUrl()).toMatch('/projects');
 
@@ -43,7 +43,7 @@ describe('translate-it2 App', () => {
     expect(await browser.getCurrentUrl()).toMatch('/works');
   });
 
-  fit('should show Translate IT 2 entity in project list', async () => {
+  it('should show Translate IT 2 entity in project list', async () => {
     page.navigateTo('/projects;state=edit;id=1');
     const elementText = await page.getFirstParagraphText(
       'app-project-list table tbody tr td');
@@ -51,7 +51,7 @@ describe('translate-it2 App', () => {
   });
 
   // https://gist.github.com/javierarques/0c4c817d6c77b0877fda
-  fit('should show Translate IT 2 detail when Edit clicked', async () => {
+  it('should show Translate IT 2 detail when Edit clicked', async () => {
     page.navigateTo('/projects');
     // page.navigateTo('/projects;state=edit;id=1');
     await element.all(by.buttonText('Edit')).first().click();
@@ -66,7 +66,7 @@ describe('translate-it2 App', () => {
     expect(elementText).toEqual('en_EN');
   });
 
-  fit('should rename and save Translate IT 2 entity', async () => {
+  it('should rename and save Translate IT 2 entity', async () => {
     page.navigateTo('/projects;state=edit;id=1');
     await element.all(by.buttonText('Edit')).first().click();
 
@@ -104,9 +104,9 @@ describe('translate-it2 App', () => {
 
     await browser.wait(element(by.buttonText('Save')).isEnabled, 3000);
     await element(by.buttonText('Save')).click();
-    const elementText = await element.all(
+    let rowCount = await element.all(
       by.css('app-project-list table tbody tr')).count();
-    expect(elementText).toBe(2);
+    expect(rowCount).toBe(2);
 
     await element(by.buttonText('Delete')).click()
     /*
@@ -116,7 +116,7 @@ describe('translate-it2 App', () => {
           await element(by.buttonText('Yes')).click();
     */
     await browser.wait(element(by.css('app-project-list')).isDisplayed(), 5000);
-    const rowCount = await element.all(
+    rowCount = await element.all(
       by.css('app-project-list table tbody tr')).count();
     expect(rowCount).toBe(1);
 
@@ -124,7 +124,7 @@ describe('translate-it2 App', () => {
     expect(browser.isElementPresent(detail)).toBe(false);
   });
 
-  fit('should show detail when empty Project list', async () => {
+  it('should show detail when empty Project list', async () => {
     page.navigateTo('/projects');
     // await page.navigateTo('/projects;state=edit;id=1');
 
@@ -153,7 +153,7 @@ describe('translate-it2 App', () => {
     expect(rowCount).toBe(1);
   });
 
-  fit('should show error message when invalid project id', async () => {
+  it('should show error message when invalid project id', async () => {
     await page.navigateTo('/projects;state=edit;id=666');
 
     const errorMessage = await element(by.css('app-error-message'));
@@ -169,7 +169,7 @@ describe('translate-it2 App', () => {
     expect(browser.isElementPresent(errorMessage)).toBe(true);
   });
 
-  fit('should show error message when save project with existing name', async () => {
+  it('should show error message when save project with existing name', async () => {
     await page.navigateTo('/projects;state=edit;id=1');
 
     await browser.wait(element(by.buttonText('New')).isEnabled, 3000);
diff --git a/src/app/projects/project-detail/project-detail.component.ts b/src/app/projects/project-detail/project-detail.component.ts
index 9374e49..5686798 100644
--- a/src/app/projects/project-detail/project-detail.component.ts
+++ b/src/app/projects/project-detail/project-detail.component.ts
@@ -80,19 +80,18 @@ export class ProjectDetailComponent implements OnInit {
 
   getProjectByRouteId(): any {
     this.route.params.subscribe(params => {
+      this.containerStateService.state(params['state']);
       const routeId = +params['id'];
-      const viewState = params['state'];
+      this.loggingMsg('Entering getProjectByRouteId() with: ' + routeId);
+
       if (!isNaN(routeId) && (routeId !== 0)) {
         return this.projectService.getProject(routeId)
           .then(project => {
-            this.loggingMsg('Entering getProjectByRouteId() with: ' + routeId);
-            this.loggingMsg('Got a project:' + JSON.stringify(project));
-
+            this.loggingMsg('and got a project:' + JSON.stringify(project));
             this.project = project;
             this.projectForm.setValue(this.project);
           })
           .catch(error => {
-            this.setErrorMessage(error);
             this.setDefaultProject();
           });
       } else {
@@ -130,9 +129,7 @@ export class ProjectDetailComponent implements OnInit {
       .then(() => {
         this.loggingMsg('Deleted project: ' + this.project.name);
         this.setDefaultProject();
-        this.updateDetailView(true);
-      }).catch(error => {
-        this.setErrorMessage(error);
+        this.updateView(true);
       });
   }
 
@@ -152,9 +149,7 @@ export class ProjectDetailComponent implements OnInit {
       .then(project => {
         this.loggingMsg('Updated project: ' + project.name);
         this.project = project;
-        this.updateDetailView(false);
-      }).catch(error => {
-        this.setErrorMessage(error);
+        this.updateView(false);
       });
   }
 
@@ -163,21 +158,18 @@ export class ProjectDetailComponent implements OnInit {
       .then(project => {
         this.loggingMsg('Created project: ' + JSON.stringify(project.name));
         this.project = project;
-        this.updateDetailView(false);
-      }).catch(error => {
-        this.setErrorMessage(error);
+        this.updateView(false);
       });
   }
 
-  private updateDetailView(hideDetailView: boolean): void {
+  private updateView(hideDetailView: boolean): void {
     this.projectForm.setValue(this.project);
     this.updateBrowserPath(this.project);
-    this.projectService._refreshData();
 
     if (hideDetailView) { this.containerStateService.hideDetail();
     } else { this.containerStateService.showDetail(); }
 
-    this.clearMessages();
+    this.projectService.refreshData();
   }
 
   private updateBrowserPath(project: Project): void {
@@ -194,17 +186,9 @@ export class ProjectDetailComponent implements OnInit {
     console.log(msg);
   };
 
+  // just for testing
   private changeTitle(event: any): void {
-    this.messageService.sendMessage(event);
+    this.messageService.sendTextMessage(event);
   }
 
-  private setErrorMessage(error: any): void {
-    this.messageService.sendErrorMessage(error);
-  }
-
-  private clearMessages(): void {
-    // this.messageService.sendSuccessMessage('');
-    // this.messageService.sendErrorMessage('');
-    this.messageService.clearMessage();
-  }
 }
diff --git a/src/app/projects/project-list/project-list.component.html b/src/app/projects/project-list/project-list.component.html
index 5d0ebd8..f298b34 100644
--- a/src/app/projects/project-list/project-list.component.html
+++ b/src/app/projects/project-list/project-list.component.html
@@ -19,7 +19,6 @@
   </thead>
 
   <tbody>
-    <!-- <tr *ngFor="let prj of _projects"> -->
     <!-- <tr *ngFor="let prj of promiseProjects | async"> -->
     <!-- <tr *ngFor="let prj of (promiseViewProjects | async)?.projects"> -->
     <tr *ngFor="let prj of observableProjects | async">
@@ -27,15 +26,13 @@
       <td>{{prj.format}}</td>
       <td>{{prj.type}}</td>
       <td>{{prj.sourceLocale}}</td>
-      <!-- <td>{{_workCountMap[prj.id]}}</td> -->
-      <!-- <td *ngIf="observableProjectWorkMap | async as workCountMap">-->
       <td *ngIf="observableProjectWorkMap | async; let workCountMap; else emptycell">
         {{workCountMap[prj.id]}}
       </td>
       <ng-template #emptycell> <td> 0 </td></ng-template>
 
       <div class="form-actions floatRight">
-        <td><button (click) = "editProject(prj.id)">Edit</button></td>
+        <td><button (click) = "goToProjectDetail(prj.id)">Edit</button></td>
         <td><button (click) = "goToWorks(prj.id)" id ="Next">Next</button></td>
       </div>
     </tr>
diff --git a/src/app/projects/project-list/project-list.component.ts b/src/app/projects/project-list/project-list.component.ts
index 53f424a..27dd274 100644
--- a/src/app/projects/project-list/project-list.component.ts
+++ b/src/app/projects/project-list/project-list.component.ts
@@ -39,9 +39,9 @@ export class ProjectListComponent implements OnInit {
   }
 
   ngOnInit() {
-    this.projectService._refreshData();
-    this.observableProjects = this.projectService._getProjectsObservable();
-    this.observableProjectWorkMap = this.projectService._getProjectWorkMapObservable();
+    this.projectService.refreshData();
+    this.observableProjects = this.projectService.getProjectsObservable();
+    this.observableProjectWorkMap = this.projectService.getProjectWorkMapObservable();
 
     // If this is a direct link to an entity, thew we'll show it
     this.getDetailViewByRouteId();
@@ -49,15 +49,15 @@ export class ProjectListComponent implements OnInit {
 
   getDetailViewByRouteId(): void {
     this.route.params.subscribe(params => {
-      const viewState = params['state'];
+      this.containerStateService.state(params['state']);
       const routeId = +params['id'];
       if (!isNaN(routeId) && (routeId !== 0)) {
-        this.editProject(routeId);
+        this.goToProjectDetail(routeId);
       }
     })
   }
 
-  private editProject(projectId: number): void {
+  private goToProjectDetail(projectId: number): void {
     this.containerStateService.showDetail();
 
     let link: any;
@@ -76,6 +76,6 @@ export class ProjectListComponent implements OnInit {
 
   // Just for testing
   private changeTitle(event: any): void {
-    this.messageService.sendMessage(event);
+    this.messageService.sendTextMessage(event);
   }
 }
diff --git a/src/app/projects/projects.component.html b/src/app/projects/projects.component.html
index 545f4dd..98b7e4a 100644
--- a/src/app/projects/projects.component.html
+++ b/src/app/projects/projects.component.html
@@ -14,10 +14,10 @@
   <app-error-message> </app-error-message>
 
   <div class="panel panel-default" [ngSwitch]="currentView">
-    <div class="panel-heading" *ngIf="!isDetailHidden || isProjectListEmpty">
+    <div class="panel-heading" *ngIf="!isDetailHidden">
       <span class="lead">{{detailTitle}} </span>
     </div>
-    <div class="panel-body" *ngIf="!isDetailHidden || isProjectListEmpty ">
+    <div class="panel-body" *ngIf="!isDetailHidden">
 
       <div *ngSwitchCase="'Project'">
         <app-project-detail></app-project-detail>
diff --git a/src/app/projects/projects.component.ts b/src/app/projects/projects.component.ts
index 77a8874..0187576 100644
--- a/src/app/projects/projects.component.ts
+++ b/src/app/projects/projects.component.ts
@@ -3,13 +3,9 @@ import { Component, OnInit, OnDestroy, AfterViewInit, ViewChild } from '@angular
 import { Location } from '@angular/common';
 import { Subscription } from 'rxjs/Subscription';
 
-import { ProjectListComponent } from './project-list/project-list.component';
-import { ProjectDetailComponent } from './project-detail/project-detail.component';
 import { ErrorMessageComponent } from '../shared/error-message/error-message.component';
 import { ErrorMessageService } from '../shared/error-message.service';
 import { ContainerStateService  } from '../shared/container-state.service';
-import { ProjectService  } from './shared/project.service';
-
 
 // https://stackoverflow.com/questions/36527605/how-to-style-child-components-from-parent-components-css-file
 @Component({
@@ -26,13 +22,10 @@ export class ProjectsComponent implements OnInit, AfterViewInit, OnDestroy {
     '/units': 'Unit'
   }
 
-  @ViewChild(ProjectListComponent)
-  private projectListComponent: ProjectListComponent;
   @ViewChild(ErrorMessageComponent)
   private errorMessageComponent: ErrorMessageComponent;
 
   private isDetailHidden: boolean;
-  private isProjectListEmpty: boolean;
   private listTitle: string;
   private detailTitle: string;
 
@@ -43,7 +36,6 @@ export class ProjectsComponent implements OnInit, AfterViewInit, OnDestroy {
     private location: Location,
     private messageService: ErrorMessageService,
     private containerState: ContainerStateService,
-    private projectService: ProjectService,
     ) { };
 
   ngOnInit() {
@@ -53,7 +45,6 @@ export class ProjectsComponent implements OnInit, AfterViewInit, OnDestroy {
 
     this.subscribeMessages();
     this.subscribeContainerState()
-    this.subscribeProjectListState();
     this.containerState.hideDetail();
 
     if (this.currentView === 'Work') {
@@ -79,36 +70,21 @@ export class ProjectsComponent implements OnInit, AfterViewInit, OnDestroy {
     this.subscriptions.push(subscription);
   }
 
-  subscribeProjectListState(): void {
-    let subscription: Subscription;
-
-    subscription = this.projectService.isProjectListEmpty.subscribe(
-      isProjectListEmpty => { this.isProjectListEmpty = isProjectListEmpty; } );
-
-    this.subscriptions.push(subscription);
-  }
-
   subscribeMessages(): void {
     let subscription: Subscription;
 
     subscription = this.messageService.getMessage().subscribe(message => {
-      if (isUndefined(message.text)) {
-        console.log('ErrorMessageService: message.text undefined');
-      } else {
+      if (!(isUndefined(message.text))) {
         this.detailTitle = message.text;
         console.log('ErrorMessageService: ' + JSON.stringify(message.text));
       }
 
-      if (isUndefined(message.error)) {
-        console.log('ErrorMessageService: message.error undefined');
-      } else {
+      if (!(isUndefined(message.error))) {
         this.errorMessageComponent.setErrorMessage(message.error);
         console.log('ErrorMessageService: ' + JSON.stringify(message.error));
       }
 
-      if (isUndefined(message.success)) {
-        console.log('ErrorMessageService: message.success undefined');
-      } else {
+      if (!(isUndefined(message.success))) {
         this.errorMessageComponent.setSuccessMessage(message.success);
         console.log('ErrorMessageService: ' + JSON.stringify(message.success));
       }
diff --git a/src/app/projects/shared/project.service.ts b/src/app/projects/shared/project.service.ts
index 2eed01b..d7f25e2 100644
--- a/src/app/projects/shared/project.service.ts
+++ b/src/app/projects/shared/project.service.ts
@@ -9,7 +9,8 @@ import { Headers, Http, RequestOptions } from '@angular/http';
 import { AppconfigService } from '../../shared/appconfig.service';
 
 import { Project } from './Project';
-// import { PROJECTS } from '../../shared/mock-projects';
+import { MessageInterface } from '../../shared/message-interface'
+import { StateInterface } from '../../shared/state-interface'
 
 @Injectable()
 export class ProjectService {
@@ -27,45 +28,31 @@ export class ProjectService {
   "start": "ng serve --proxy-config proxy.conf.json
   */
 
-  private projectData: Subject<Project[]> = new BehaviorSubject<Project[]>([]);
-  private projectWorkMapData: Subject<any> = new BehaviorSubject<any>({});
+  private _projectData: Subject<Project[]> = new BehaviorSubject<Project[]>([]);
+  private _projectWorkMapData: Subject<any> = new BehaviorSubject<any>({});
 
-  private _isProjectListEmpty: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);
-  public get isProjectListEmpty() { return this._isProjectListEmpty; }
-  projectListIsEmpty() { this._isProjectListEmpty.next(true); }
-  projectListIsNotEmpty() { this._isProjectListEmpty.next(false); }
+  private _messageService: MessageInterface;
+  private _uiStateService: StateInterface;
 
-  constructor(private http: Http) { }
+  constructor(private _http: Http, ) { }
 
-  _getProjectsObservable() { return this.projectData.asObservable(); }
-  _getProjectWorkMapObservable() { return this.projectWorkMapData.asObservable(); }
-
-  _getProjects(): void {
-    this.http
-      .get(this.projectsUrl)
-      .map((res: any) => res.json() )
-      // .takeWhile(() => !this.projectData) // unsubscribe automatically
-      .subscribe( (viewProjects: any) => {
-        this.projectWorkMapData.next(viewProjects.projectWorkMap);
-        this.projectData.next(viewProjects.projects);
+  registerMessageService(messageService: MessageInterface) {
+    this._messageService = messageService;
+  }
 
-        if (((viewProjects.projects as Project[])).length === 0) {
-          this.projectListIsEmpty();
-        } else {
-          this.projectListIsNotEmpty();
-        }
-      },
-      (err: any) => console.error('_getProjects(): ERROR'),
-      () => console.log('_getProjects(): always')
-      )
+  registerStateService(stateService: StateInterface) {
+    this._uiStateService = stateService;
   }
 
-  _refreshData() {
+  getProjectsObservable() { return this._projectData.asObservable(); }
+  getProjectWorkMapObservable() { return this._projectWorkMapData.asObservable(); }
+
+  refreshData() {
     this._getProjects();
   }
 
   getProjects(): Promise<Project[]> {
-    return this.http.get(this.projectsUrl)
+    return this._http.get(this.projectsUrl)
       .toPromise()
       .then(response => {
         console.log('Response data: ' + response.text());
@@ -78,72 +65,82 @@ export class ProjectService {
     console.log('Entering ProjectsService.getProject() with id ' + id);
 
     const url = `${this.projectsUrl}${id}`;
-    return this.http.get(url)
+    return this._http.get(url)
       .toPromise()
       .then(response => {
         console.log('Response data: ' + response.text());
+        this._messageService.sendErrorMessage('');
         return response.json() as Project[];
       })
-      .catch(this.handleError)
+      .catch(error => this._messageService.sendErrorMessage(error));
   }
 
   update(project: Project): Promise<Project> {
     const url = `${this.projectsUrl}${project.id}`;
     const headers = new Headers({ 'Content-Type': 'application/json' });
 
-    return this.http
+    return this._http
       .put(url,
-      project
-      // JSON.stringify(project)
-      /*JSON.stringify({
-         format: project.format,
-         id: project.id,
-         name: project.name,
-         personId: project.personId,
-         type: project.type,
-         sourceLocale: project.sourceLocale
-       })*/
-      ,
+      project,
       { headers: headers })
       .toPromise()
       .then(response => {
         console.log('Response from update: ' + response.text());
+        this._messageService.sendErrorMessage('');
         return response.json() as Project[];
       })
-      .catch(this.handleError);
+      .catch(error => this._messageService.sendErrorMessage(error));
   }
 
   delete(id: number): Promise<void> {
     const url = `${this.projectsUrl}${id}`;
     const headers = new Headers({ 'Content-Type': 'application/json' });
 
-    return this.http.delete(url, { headers: headers })
+    return this._http.delete(url, { headers: headers })
       .toPromise()
-      .then(() => null)
-      .catch(this.handleError);
+      .then(() => this._messageService.sendErrorMessage(''))
+      .catch(error => this._messageService.sendErrorMessage(error));
   }
 
   // http://www.concretepage.com/angular-2/angular-2-http-post-example#post
   create(project: Project): Promise<Project> {
-    // const url = `${this.projectsUrl}/0`;
     const headers = new Headers({ 'Content-Type': 'application/json' });
 
-    return this.http
+    return this._http
       .post(this.projectsUrl,
-      // JSON.stringify(project),
       project,
       { headers: headers })
       .toPromise()
       .then(response => {
         console.log('Response from create: ' + response.text());
+        this._messageService.sendErrorMessage('')
         return response.json() as Project[];
       })
-      .catch(this.handleError);
+      .catch(error => this._messageService.sendErrorMessage(error));
+  }
+
+  private _getProjects(): void {
+    this._http
+      .get(this.projectsUrl)
+      .map((res: any) => res.json())
+      // .takeWhile(() => !this.projectData) // unsubscribe automatically
+      .subscribe((viewProjects: any) => {
+        this._projectWorkMapData.next(viewProjects.projectWorkMap);
+        this._projectData.next(viewProjects.projects);
+
+        if (((viewProjects.projects as Project[])).length === 0) {
+          this._uiStateService.showDetail();
+        }
+      },
+      (err: any) => this._messageService.sendErrorMessage(err),
+      () => console.log('_getProjects(): always')
+      )
   }
 
   private handleError(error: any): Promise<any> {
     console.error('An error occurred: ', error.text());
     return Promise.reject(error);
   }
+
 }
 
diff --git a/src/app/shared/container-state.service.ts b/src/app/shared/container-state.service.ts
index 0ddd106..28fc8a0 100644
--- a/src/app/shared/container-state.service.ts
+++ b/src/app/shared/container-state.service.ts
@@ -1,15 +1,19 @@
 import { Injectable } from '@angular/core';
 import { BehaviorSubject, Observable } from 'rxjs/Rx';
+import { StateInterface } from './state-interface'
+import { ProjectService } from '../projects/shared/project.service'
 
 @Injectable()
-export class ContainerStateService {
+export class ContainerStateService implements StateInterface {
   private _isDetailHidden: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);
   private _state: BehaviorSubject<string> = new BehaviorSubject<string>('list');
 
-  constructor() { }
+  constructor(private _projectService: ProjectService) {
+      _projectService.registerStateService(this);
+  }
 
   public get state() { return this._state.getValue(); }
-  public set state(newState: string) { this._state.next(newState); }
+  public set state(newState: any) { this._state.next(newState); }
 
   public get isDetailHidden() {
     return this._isDetailHidden;
diff --git a/src/app/shared/error-message.service.ts b/src/app/shared/error-message.service.ts
index 45321ed..f482d88 100644
--- a/src/app/shared/error-message.service.ts
+++ b/src/app/shared/error-message.service.ts
@@ -1,30 +1,18 @@
 import { Injectable } from '@angular/core';
 import { BehaviorSubject, Observable, Subject } from 'rxjs/Rx';
 
+import { MessageInterface } from './message-interface'
+import { ProjectService } from '../projects/shared/project.service'
+
 @Injectable()
-export class ErrorMessageService {
-  private subject = new Subject<any>();
+export class ErrorMessageService implements MessageInterface {
+  private subject: Subject<any> = new BehaviorSubject<any>({});
 
-/*
-  private behaviorSubject =  new BehaviorSubject<any>({});
-  _sendMessage(message: string) {
-    this.behaviorSubject.next({ text: message });
-  }
-  _sendErrorMessage(error: any) {
-    this.behaviorSubject.next({ error: error });
-  }
-  _sendSuccessMessage(success: any) {
-    this.behaviorSubject.next({ success: success });
-  }
-  _getMessage(): Observable<any> {
-    return this.behaviorSubject.asObservable();
-  }
-  _clearMessage() {
-    this.behaviorSubject.next({});
+  constructor(private _projectService: ProjectService) {
+      _projectService.registerMessageService(this);
   }
-*/
 
-  sendMessage(message: string) {
+  sendTextMessage(message: string) {
     this.subject.next({ text: message });
   }
 
@@ -36,7 +24,7 @@ export class ErrorMessageService {
     this.subject.next({ success: success });
   }
 
-  clearMessage() {
+  clearMessages() {
     this.subject.next({ error: '' });
     this.subject.next({ success: '' });
   }
diff --git a/src/app/shared/message-interface.ts b/src/app/shared/message-interface.ts
new file mode 100644
index 0000000..2e68df2
--- /dev/null
+++ b/src/app/shared/message-interface.ts
@@ -0,0 +1,9 @@
+import { Observable } from 'rxjs/Rx';
+
+export interface MessageInterface {
+  clearMessages();
+  sendTextMessage(message: string);
+  sendErrorMessage(error: any);
+  sendSuccessMessage(success: any);
+  getMessage(): Observable<any>;
+}
diff --git a/src/app/shared/state-interface.ts b/src/app/shared/state-interface.ts
new file mode 100644
index 0000000..f814ea8
--- /dev/null
+++ b/src/app/shared/state-interface.ts
@@ -0,0 +1,4 @@
+export interface StateInterface {
+  hideDetail();
+  showDetail();
+}
